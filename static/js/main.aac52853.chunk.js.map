{"version":3,"sources":["assets/logo.svg","assets/githubBackground.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","exact","component","App","basename","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aac52853.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/githubBackground.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\r\n\r\nimport githubBackground from '../assets/githubBackground.svg';\r\n\r\nexport default createGlobalStyle`\r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        outline: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    body {\r\n        background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\r\n        -webkit-font-smoothing: antialiased;\r\n    }\r\n\r\n    body, -moz-user-input, button {\r\n        font: 16px Roboto, sans-serif;\r\n    }\r\n\r\n    #root {\r\n        max-width: 960px;\r\n        margin: 0 auto;\r\n        padding: 40px 20px;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n    }\r\n`;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.github.com/',\n});\n\nexport default api;","import styled, { css } from 'styled-components';\r\nimport { shade } from 'polished';\r\n\r\ninterface FormProps {\r\n    hasError: boolean;\r\n}\r\n\r\n//template literals\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 48px;\r\n    color: #3A3A3A;\r\n    max-width: 450px;\r\n    line-height: 56px;\r\n\r\n    margin-top: 80px\r\n`;\r\n\r\nexport const Form = styled.form<FormProps>`\r\n    margin-top: 40px;\r\n    max-width: 700px;\r\n\r\n    display: flex;\r\n\r\n    input {\r\n        flex: 1;\r\n        height: 70px;\r\n        padding: 0 24px;\r\n        border: 0;\r\n        border-radius: 5px 0 0 5px;\r\n        color: #3a3a3a;\r\n        border: 2px solid #fff;\r\n        border-right: 0;\r\n\r\n        ${(props) => props.hasError && css`\r\n            border-color: #c53030;\r\n        `}\r\n\r\n        &::placeholder {\r\n            color: #a8a8b3;\r\n        }\r\n    }\r\n\r\n    button {\r\n        width: 210px;\r\n        height: 70px;\r\n        background: #04D361;\r\n        border-radius: 0px 5px 5px 0px;\r\n        border: 0;\r\n        color: #fff;\r\n        font-weight: bold;\r\n        transition: background-color 0.2s;\r\n\r\n        &:hover {\r\n            background: ${shade(0.2, '#04d361')};\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Error = styled.span`\r\n    display:block;\r\n    color: #c53030;\r\n    margin-top: 8px;\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\n    margin-top: 80px;\r\n    max-width: 700px;\r\n\r\n    a {\r\n        background: #fff;\r\n        border-radius: 5px;\r\n        width: 100%;\r\n        padding: 24px;\r\n        display: block;\r\n        text-decoration: none;\r\n        \r\n\r\n        display: flex;\r\n        align-items: center;\r\n        transition: transform 0.2s;\r\n        transition: background-color 0.2s;\r\n\r\n         \r\n        & + a {\r\n            margin-top: 16px;\r\n        }\r\n\r\n        &:hover {\r\n            transform: translateX(10px);\r\n            background: ${shade(0.2, \"#fff\")};\r\n        }\r\n\r\n        img {\r\n            width: 64px;\r\n            height: 64px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        div {\r\n            margin-left: 16px;\r\n            flex: 1;\r\n\r\n            strong {\r\n                font-size: 20px;\r\n                color: #3D3D4D;\r\n            }\r\n\r\n            p {\r\n                font-size: 18px;\r\n                color: #a8a8b3;\r\n                margin-top: 4px;\r\n            }\r\n        }\r\n\r\n        svg {\r\n            margin-left: auto;\r\n            color: #cbcbd6;\r\n        }\r\n    }\r\n`;","import React, { useState, FormEvent, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n    full_name: string;\n    owner: {\n        login: string;\n        avatar_url: string;\n\n    };\n    description: string;\n}\n\nconst Dashboard: React.FC = () => {\n    const [newRepo, setNewRepo] = useState('');\n    const [inputError, setInputError] = useState('');\n    const [repositories, setRepositories] = useState<Repository[]>(() => {\n        const storagedRepositories = localStorage.getItem('@GithubExplorer:repositories');\n\n        if (storagedRepositories) {\n            return JSON.parse(storagedRepositories);\n        }\n        return [];\n    });\n\n    useEffect(() => {\n        localStorage.setItem('@GithubExplorer:repositories', JSON.stringify(repositories));\n    }, [repositories]);\n\n    async function handleAddRepository(event: FormEvent<HTMLFormElement>): Promise<void> {\n        event.preventDefault();\n\n        if (!newRepo) {\n            setInputError('Digite o autor/nome do repositorio');\n            return;\n        }\n\n        try {\n            const response = await api.get<Repository>(`repos/${newRepo}`);\n\n            const repository = response.data;\n\n            setRepositories([...repositories, repository]);\n            setNewRepo('');\n            setInputError('');\n        } catch (error) {\n            setInputError('Erro na busca do repositorio');\n        }\n    }\n\n    return (\n        <>\n            <img src={logoImg} alt=\"GithubExplorer\" />\n            <Title>Explore repositórios no Github</Title>\n\n            <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n                <input\n                    value={newRepo}\n                    onChange={(e) => setNewRepo(e.target.value)}\n                    placeholder=\"Digite o nome do repositório\"\n                />\n                <button type=\"submit\">Pesquisar</button>\n            </Form>\n\n            {inputError && <Error>{inputError}</Error>}\n\n            <Repositories>\n                {repositories.map(repository => (\n                    <Link\n                        key={repository.full_name}\n                        to={`/repository/${repository.full_name}`}\n                    >\n                        <img\n                            src={repository.owner.avatar_url}\n                            alt={repository.owner.login}\n                        />\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n\n                        <FiChevronRight size={20} />\n                    </Link>\n                ))}\n\n            </Repositories>\n\n        </>\n    );\n}\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { shade } from 'polished';\n\nexport const Header = styled.header`\n    display:flex;\n    align-items: center;\n    justify-content: space-between;\n\n    a {\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        color: #a8a8b3;\n        transition: color 0.2s;\n\n        &:hover {\n        color: #666;\n        }\n    }\n\n    svg {\n        margin-right: 4px;\n    }\n`;\n\nexport const RepositoryInfo = styled.section`\n    margin-top: 80px;\n\n    header{\n        display: flex;\n        align-items: center;\n\n        img{\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n        }\n\n        div {\n            margin-left: 24px;\n\n            strong {\n                font-size: 36px;\n                color:#2d2d4d;\n            }\n\n            p {\n                font-size: 18px;\n                color: #737380;\n                margin-top: 4px;\n            }\n        }\n    }\n\n    ul{\n        display: flex;\n        list-style: none;\n        margin-top: 40px;\n\n        li {\n            & + li {\n                margin-left: 80px;\n            }\n            strong {\n                display: block;\n                font-size: 36px;\n                color: #3d3d4d;\n            }\n\n            span {\n                display: block;\n                margin-top: 4px;\n                color: #6c6c80;\n            }\n        }\n    }\n`;\n\nexport const Issues = styled.div`\n    margin-top: 80px;\n\n    a {\n        background: #fff;\n        border-radius: 5px;\n        width: 100%;\n        padding: 24px;\n        display: block;\n        text-decoration: none;\n        \n\n        display: flex;\n        align-items: center;\n        transition: transform 0.2s;\n        transition: background-color 0.2s;\n\n         \n        & + a {\n            margin-top: 16px;\n        }\n\n        &:hover {\n            transform: translateX(10px);\n            background: ${shade(0.2, \"#fff\")};\n        }\n\n        \n        div {\n            margin-left: 0 16px;\n            flex: 1;\n\n            strong {\n                font-size: 20px;\n                color: #3D3D4D;\n            }\n\n            p {\n                font-size: 18px;\n                color: #a8a8b3;\n                margin-top: 4px;\n            }\n        }\n\n        svg {\n            margin-left: auto;\n            color: #cbcbd6;\n        }\n    }\n`;","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n    repository: string;\n}\n\ninterface Repository {\n    full_name: string;\n    description: string;\n    stargazers_count: number;\n    forks_count: number;\n    open_issues_count: number;\n    owner: {\n        login: string;\n        avatar_url: string;\n    }\n}\n\ninterface Issue {\n    id: number;\n    title: string;\n    html_url: string;\n    user: {\n        login: string;\n    }\n}\n\nconst Repository: React.FC = () => {\n    const [repository, setRepository] = useState<Repository | null>(null);\n    const [issues, setIssues] = useState<Issue[]>([]);\n\n    const { params } = useRouteMatch<RepositoryParams>();\n\n    useEffect(() => {\n        api.get(`repos/${params.repository}`).then((response) => {\n            setRepository(response.data);\n        });\n\n        api.get(`repos/${params.repository}/issues`).then((response) => {\n            setIssues(response.data);\n        });\n    }, [params.repository]);\n\n    return (\n        <>\n            <Header>\n                <img src={logoImg} alt=\"Github Explorer\" />\n                <Link to=\"/\">\n                    <FiChevronLeft size={16} />\n                    Voltar\n                </Link>\n            </Header>\n\n            {repository && (\n                <RepositoryInfo>\n                    <header>\n                        <img src={repository.owner.avatar_url} alt={repository.owner.login} />\n                        <div>\n                            <strong>{repository.full_name}</strong>\n                            <p>{repository.description}</p>\n                        </div>\n                    </header>\n                    <ul>\n                        <li>\n                            <strong>{repository.stargazers_count}</strong>\n                            <span>Stars</span>\n                        </li>\n                        <li>\n                            <strong>{repository.forks_count}</strong>\n                            <span>Forks</span>\n                        </li>\n                        <li>\n                            <strong>{repository.open_issues_count}</strong>\n                            <span>Issues abertos</span>\n                        </li>\n                    </ul>\n                </RepositoryInfo>\n            )}\n\n            <Issues>\n                {issues.map((issue) => (\n                    <a key={issue.id} href={issue.html_url}>\n                        <div>\n                            <strong>{issue.title}</strong>\n                            <p>{issue.user.login}</p>\n                        </div>\n\n                        <FiChevronRight size={20} />\n                    </a>\n                ))}\n            </Issues>\n\n        </>\n    );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n    <Switch>\n        <Route path=\"/\" exact component={Dashboard} ></Route>\n        <Route path=\"/repository/:repository+\" component={Repository} ></Route>\n    </Switch>\n);\n\nexport default Routes;","import React from 'react';\nimport {BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes/>\n    </BrowserRouter>  \n    <GlobalStyle/>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}